from collections import namedtuple
import random
import sys
import logging
import time
import threading

# Change log level to DEBUG
logging.basicConfig(level = logging.INFO)

def anyof(s):
    return next(iter(s)) if s else None

"""
[Liu] Copied from paper, except:
  replaced latex to use ascii <-, |>, <, >, and, or, in, -, '', ', big(
  added _ before subscript

Algorithm 1 Utilities (for replica r).
 1: function Msg(type, node, qc)
 2:   m.type <- type
 3:   m.viewNumber <- curView
 4:   m.node <- node
 5:   m.justify <- qc
 6: return m
 7: function voteMsg(type, node, qc)
 8:   m <- Msg(type, node, qc)
 9:   m.partialSig <- tsign_r (<m.type, m.viewNumber, m.node>)
10: return m
11: procedure createLeaf(parent, cmd)
12:   b.parent <- parent
13:   b.cmd <- cmd
14: return b
15: function QC(V)
16:   qc.type <- m.type : m in V
17:   qc.viewNumber <- m.viewNumber : m in V
18:   qc.node <- m.node : m in V
19:   qc.sig <- tcombine(<qc.type, qc.viewNumber, qc.node>,
      	     		{m.partialSig | m in V })
20: return qc
21: function matchingMsg(m, t, v)
22:   return (m.type = t) and (m.viewNumber = v)
23: function matchingQC(qc, t, v)
24:   return (qc.type = t) and (qc.viewNumber = v)
25: function safeNode(node, qc)
26:   return (node extends from lockedQC.node) or // safety rule
27:  (qc.viewNumber > lockedQC.viewNumber) // liveness rule

Algorithm 2 Basic HotStuff protocol (for replica r).
 1: for curView <- 1, 2, 3, . . . do
    |> prepare phase
 2:   as a leader // r = leader(curView)
      // we assume special new-view messages from view 0
 3:     wait for (n - f ) new-view messages:
             M <- {m | matchingMsg(m, new-view, curView-1)}
 4:     highQC <-
        (
        argmax
        m in M
        {m.justify.viewNumber}
        )
        .justify
 5:     curProposal <- createLeaf(highQC.node,
                                  client's command)
 6:     broadcast Msg(prepare, curProposal, highQC)
 7: as a replica
 8:   wait for message m from leader(curView)
           m : matchingMsg(m, prepare, curView)
 9:   if m.node extends from m.justify.node and
                safeNode(m.node, m.justify) then
10:    send voteMsg(prepare, m.node, bot) to leader(curView)
    |> pre-commit phase
11:   as a leader
12:     wait for (n - f ) votes:
	     V <- {v | matchingMsg(v, prepare, curView)}
13:     prepareQC <- QC(V)
14:     broadcast Msg(pre-commit, bot, prepareQC)
15:   as a replica
16:     wait for message m from leader(curView)
	     m : matchingQC(m.justify, prepare, curView)
17:     prepareQC <- m.justify
18:     send to leader(curView)
	     voteMsg(pre-commit, m.justify.node, bot)
    |> commit phase
19:   as a leader
20:     wait for (n - f ) votes:
             V <- {v | matchingMsg(v, pre-commit, curView)}
21:     precommitQC <- QC(V)
22:     broadcast Msg(commit, bot, precommitQC)
23:   as a replica
24:     wait for message m from leader(curView)
             m : matchingQC(m.justify, pre-commit, curView)
25:     lockedQC <- m.justify
26:     send to leader(curView)
             voteMsg(commit, m.justify.node, bot)
    |> decide phase
27: as a leader
28:   wait for (n - f ) votes:
      	 V <- {v | matchingMsg(v, commit, curView)}
29:   commitQC <- QC(V)
30:   broadcast Msg(decide, bot, commitQC)
31: as a replica
32:   wait for message m from leader(curView)
      	   m : matchingQC(m.justify, commit, curView)
33:   execute new commands through m.justify.node,
      respond to clients
    |> Finally
34:   nextView interrupt: goto this line if nextView(curView) is
      called during "wait for" in any phase
35:   send Msg(new-view, bot, prepareQC) to leader(curView + 1)
"""

""" [Note] Modify from the paper:
        1. namedtuples for Msg and Justify (QC)
        2. Use list to represent blockchain
            2.1 modified createLeaf function for list
            2.2 safeNode function for list
            2.3 check node.extend (use list_extends instead)
"""

## [Paper] Type definitions
# [Algorithm 1] Line 1 - 6
Message = namedtuple('Message', ['type', 'viewNumber', 'node', 'justify', 'partialSig'], defaults = (None, ))
# [Algorithm 1] Line 15 - 20
Justify = namedtuple('Justify', ['type', 'viewNumber', 'node', 'sig'])

class Replica(process):
    def setup(replicas: set, client: set, f: int, nextViewTimeout: float):        
        # [Paper] 4.2 - Bookkeeping variables
        self.curView = 0
        self.prepareQC = None
        self.lockedQC = None
        
        # [Differ from paper] Use list of nodes instead of blockchain
        self.blocks = list()

        # Not explicitly defined in the paper
        self.n = len(replicas)   # Number of replicas
        self.replica_index = {i: add for i, add in enumerate(sorted(list(replicas)))}    # Index of replicas -- used in leader rotation
        self.pid = sorted(list(replicas)).index(self)
        
        self.cmd = None # TODO: Not used
    
    def run():
        broadcast(Message('NEW-VIEW', 0, None, self.prepareQC))          # [Paper] Special new-view messages from view 0

        while True:         # [Paper] For curView <- 1, 2, 3, . . . do
            curView += 1

            # [DEBUG]
            output(f'[{pid}] Current view: {int(curView)}')
            
            threads = [threading.Thread(target = perform_leader, daemon = True), 
                        threading.Thread(target = perform_replica, daemon = True)]

            for t in threads:
                t.start()
            for t in threads:
                t.join(nextViewTimeout)
            
            # [Paper] Line 35 - Go to this line if nextViewTimeout is triggered
            nextView()

            # [NOT IN PAPER] sleep for a bit in between every view
            time.sleep(2)

    # ---------------------------------------- [Paper] Algorithm 2 ----------------------------------------
    def perform_leader():
        ''' Leader thread function '''

        if not is_leader():
            return

        output(f'[{pid}] Enter leader role, view: {int(curView)}')

        # [Paper] PREPARE PHASE
        # [Paper] Line 3
        await(len(setof((m, p), received(m, from_ = p), matchingMsg(m, 'NEW-VIEW', curView - 1))) >= n - f) # Here we count the process-message pair to count for duplicates
        
        # [DEBUG]
        M = setof(m, received(m), matchingMsg(m, 'NEW-VIEW', curView - 1))
        output(f'[{pid}] Messages collected: {M}')

        # [Paper] Line 4 - Calculate highQC
        highQC = to_unfrozen_justify(anyof(
            setof(m.justify, m in M, m.justify.viewNumber == max(setof(m1.justify.viewNumber, m1 in M, m1.justify != None)))         
        )) if some(m in M, has = m.justify != None) else None

        # [DEBUG]
        output(f'[{pid}] HighQC: {highQC}')

        # [Paper] Line 5
        curProposal = createLeaf(highQC.node if highQC is not None else list(), random.randint(0, 100))     # TODO: Client is omitted. Leader just sends random commands for now.
        
        # [DEBUG]
        output(f'[{pid}] Current proposal: {curProposal}')

        # [Paper] Line 6
        broadcast(Msg('PREPARE', curProposal, highQC))

        # PRE-COMMIT PHASE
        
        # [Paper] Line 10
        await(len(setof((vote, p), received(vote, from_ = p), matchingMsg(vote, 'PREPARE', curView) and vote.partialSig != None)) >= n - f)

        # [DEBUG]
        output(f'Messgae received: {setof((vote, p), received(vote, from_ = p), matchingMsg(vote, "PREPARE", curView) and vote.partialSig != None)}')
        output(f'[{pid}] Received PREPARE messages.')

        # [Paper] Line 13 - Calculate prepareQC
        prepareQC = QC(setof(m, received(m), matchingMsg(m, 'PREPARE', curView) and m.partialSig != None))

        # [Paper] Line 14
        broadcast(Msg('PRE-COMMIT', None, prepareQC))

        # [Paper] COMMIT PHASE
        await(len(setof(p, received(vote, from_ = p), matchingMsg(vote, 'PRE-COMMIT', curView) and vote.partialSig != None)) >= n - f)

        # [DEBUG]
        output(f'Message received: {setof(p, received(vote, from_ = p), matchingMsg(vote, "PRE-COMMIT", curView) and vote.partialSig != None)}')  

        # [Paper] Line 20
        precommitQC = QC(setof(m, received(m), matchingMsg(m, 'PRE-COMMIT', curView) and m.partialSig != None))
        # [Paper] Line 21
        broadcast(Msg('COMMIT', None, precommitQC))

        # [Paper] DECIDE PHASE
        # [Paper] Line 28
        await(len(setof(p, received(vote, from_ = p), matchingMsg(vote, 'COMMIT', curView) and vote.partialSig != None)) >= n - f)

        # [DEBUG]
        output(f'Message received: {setof(p, received(vote, from_ = p), matchingMsg(vote, "COMMIT", curView) and vote.partialSig != None)}')

        # [Paper] Line 29 - 30
        commitQC = QC(setof(m, received(m), matchingMsg(m, 'COMMIT', curView) and m.partialSig != None))
        broadcast(Msg('DECIDE', None, commitQC))
    
    def perform_replica():
        output(f'[{pid}] Enter replica role, view: {int(curView)}')
        leader_p = get_leader(curView)  # Leader of the current view
        
        # [Paper] PREPARE PHASE
        # [Paper] Line 8: wait for message m : matchingMsg(m, prepare, curView) from leader(curView)
        await(some(received(m, from_ = leader_p), has = matchingMsg(m, 'PREPARE', curView)))
        
        # Get m.mode and m.justify for line 9. What if m.node is not unique?
        (mnode, mjustify) = anyof(setof((m.node, m.justify), received(m, from_ = leader_p), matchingMsg(m, 'PREPARE', curView)))

        # [DEBUG]
        output(f'[{pid}] Received message: {mnode}, {mjustify}')

        # [Paper] Line 9
        if list_extends(mnode, mjustify.node if mjustify is not None else None) and safeNode(mnode, mjustify.node if mjustify is not None else None):
            # [Paper] Line 10
            send(voteMsg('PREPARE', list(mnode), None), to = leader_p) # need to wrap frozenlist with list so it can be unpickeled
            # [DEBUG]
            output(f'[{pid}] Sent vote message to leader {leader_p}.')

        # [Paper] PRE-COMMIT PHASE

        # [Paper] Line 16
        await(some(received(m, from_ = leader_p), has = matchingQC(m.justify, 'PREPARE', curView)))

        # [DEBUG]
        s = setof(m.justify, received(m, from_ = leader_p), matchingQC(m.justify, 'PREPARE', curView))
        output(f'[{pid}] Received PREPARE message = {s}.')
        
        # [Paper] Line 17
        prepareQC = to_unfrozen_justify(anyof(setof(m.justify, received(m, from_ = leader_p), matchingQC(m.justify, 'PREPARE', curView) and m.justify.sig != None))) # to verify sig is not None to filter out leader PREPARE msg (there's leader prepare and replica prepare, and they both match)

        # [Paper] Line 18
        send(voteMsg('PRE-COMMIT', prepareQC.node, None), to = leader_p)

        # [Paper] COMMIT PHASE

        # [Paper] Line 24
        await(some(received(m, from_ = leader_p), has = matchingQC(m.justify, 'PRE-COMMIT', curView)))
        
        # [Paper] Line 25
        lockedQC = to_unfrozen_justify(anyof(setof(m.justify, received(m, from_ = leader_p), matchingQC(m.justify, 'PRE-COMMIT', curView) and m.justify.sig != None)))

        # [Paper] Line 26
        send(voteMsg('COMMIT', lockedQC.node, None), to = leader_p)
        
        # [Paper] DECIDE PHASE
        
        # [Paper] What is Line 32 doing? Not clear from the paper

        # [Paper] Line 33
        await(some(received(m, from_ = leader_p), has = matchingQC(m.justify, 'COMMIT', curView)))

        # [Paper] Line 34
        execute(anyof(setof(m.justify, received(m, from_ = leader_p), matchingQC(m.justify, 'COMMIT', curView)))) # Line 34

        # [DEBUG]
        output(f'[{pid}] prepareQC = {prepareQC}, lockedQC = {lockedQC}')
    
    # ---------------------------------------- [Paper] Algorithm 1 ----------------------------------------

    def Msg(mtype, node, qc):
        return Message(mtype, curView, list(node) if node != None else None, qc)

    def voteMsg(mtype, node, qc):
        m = Msg(mtype, list(node) if node else None, qc)
        m = m._replace(partialSig=tsign((m.type, m.viewNumber, m.node)))
        output(f'Vote message: {m}') # [DEBUG]
        return m
    
    # MODIFIED from the paper
    def createLeaf(parent, cmd):
        parent = list(parent)
        parent.append(cmd)
        return parent

    def QC(V):
        ''' [Modified from paper] Returns the QC given a setof vote messages in V '''
        m = anyof(V)
        if m == None:
            return None
        justify = Justify(m.type, m.viewNumber, list(m.node) if m.node != None else None, tcombine((m.type, m.viewNumber, m.node), {m.partialSig for m in V}))
        # [DEBUG]
        output(f'QC: {justify}')
        return justify

    @staticmethod
    def matchingMsg(m, t, v):
        if isinstance(m, Message):
            return m.type == t and m.viewNumber == v
        else:
            try:
                _m = Message._make(m)
                return _m.type == t and _m.viewNumber == v
            except TypeError:
                return False

    @staticmethod
    def matchingQC(qc, t, v):
        if isinstance(qc, Justify):
            return qc.type == t and qc.viewNumber == v
        else:
            try:
                _qc = Justify._make(qc)
                return _qc.type == t and _qc.viewNumber == v
            except TypeError:
                # Both Message and Justify can be passed, TypeError is raised when Message is passed. In this case return False
                return False
    
    def safeNode(node, qc):
        return (list_extends(node, None if self.lockedQC == None else self.lockedQC.node) or qc.viewNumber > self.lockedQC.viewNumber)

    # ---------------------------------------- Not explicitly defined in the paper ----------------------------------------

    # MODIFIED from the paper (It is node.extend in the paper)
    def list_extends(l1, l2):
        '''Check if l1 extends l2, works for frozen list as well'''
        if l2 == None:
            return True
        elif l1 == None:
            return False
        return list(l1)[:len(l2)] == list(l2)

    def execute(qc):
        ''' Dummy execute function that prints the command for now '''
        output(f'received command {qc.node}.')
        cur_command = [v for i, v in enumerate(qc.node) if i >= len(self.blocks)]
        output(f'Executing command {cur_command}.')
        self.blocks.extend(cur_command)

    def get_leader(viewNumber):
        ''' Return leader for the given view number '''
        return replica_index[viewNumber % n]
    
    def is_leader():
        return pid == curView % n

    def broadcast(msg):
        output(f'Broadcast message {msg} to replicas {self.replicas}.')
        send(msg, to = self.replicas)
    
    def nextView():
        # [Paper] goto this line if nextView(curView) is called during “wait for” in any phase
        output(f'Sending NEW-VIEW message: {Msg("NEW-VIEW", None, prepareQC)} to leader {get_leader(curView + 1)}')
        # [Paper] Line 36
        send(Msg('NEW-VIEW', None, prepareQC), to = get_leader(curView + 1))
  
    def tsign(m):
        ''' Dummy function, only gives pid. TODO: use a real threshold signature lib '''
        # [DEBUG]
        output(f'Signing message {m}')
        return pid

    def tcombine(m, s: set):
        '''Dummy signature combine function.'''
        return set(s)

    # ---------------------------------------- Distalgo specific ----------------------------------------
    def to_unfrozen_justify(qc):
        ''' NOT related to the paper.
            Transform every frozen obj to normal obj in the qc.
            Just to mitigate lost messages due to unpicklable frozen objects.
        '''
        return Justify(qc.type, qc.viewNumber, list(qc.node) if qc.node != None else None, set(qc.sig) if qc.sig != None else None)

'''
Client implementation is omitted from the paper. However, it does mention the following:
[4. Basic Hotstuff] A client sends a command request to all replicas, and waits for responses from f + 1 of them.
'''
# class Client(process):
#     def setup(replicas: set, f: int):
#         self.replicas = replicas
#         self.command_n = 0    # Command number, for exactly-once semantics
    
#     def run():
#         for i in range(10):
#             command = random.randint(0, 100)
#             output(f'Client sends command {command}.')
#             # Client broadcasts command to replicas
#             send(('COMMAND', command_n, command), to = replicas)
#             # Await for f + 1 responses
#             await(len(setof(p, received(('ACK', command_n), from_ = p))) >= f + 1)
#             output(f'Command: {command} committed.')
             
def main():
    nReplicas = int(sys.argv[1]) if len(sys.argv) > 1 else 4
    nFaulty = int(sys.argv[2]) if len(sys.argv) > 2 else 1
    nextViewTimeout = float(sys.argv[4]) if len(sys.argv) > 4 else 1.0
    
    assert nReplicas > 3 * nFaulty, 'nReplicas should be greater than 3 * nFaulty'

    replicas = new(Replica, num = nReplicas)
    # client = new(Client, num = 1)

    setup(replicas, (replicas, None, nFaulty, nextViewTimeout))
    # setup(client, (replicas, nFaulty))

    start(replicas)

    await(False)
    # start(client)